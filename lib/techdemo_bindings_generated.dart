// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings for `src/techdemo.h`.
///
/// Regenerate bindings with `flutter pub run ffigen --config ffigen.yaml`.
///
class TechdemoBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  TechdemoBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  TechdemoBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void set_dart_print_function(
    ffi.Pointer<HelloFunc> func,
  ) {
    return _set_dart_print_function(
      func,
    );
  }

  late final _set_dart_print_functionPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<HelloFunc>)>>(
          'set_dart_print_function');
  late final _set_dart_print_function = _set_dart_print_functionPtr
      .asFunction<void Function(ffi.Pointer<HelloFunc>)>();

  int ffi_init() {
    return _ffi_init();
  }

  late final _ffi_initPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ffi_init');
  late final _ffi_init = _ffi_initPtr.asFunction<int Function()>();
}

class DartFrontend extends ffi.Struct {
  external ffi.Pointer<HelloFunc> dart_print;
}

typedef HelloFunc = ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>;
